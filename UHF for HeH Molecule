clear all;
n=[2,1,2,1];                                         %n(i) is the number of Gaussian functions of each basic set
KAI=cell(2,4);
%Basic set of Hydrogen
KAI{1,1}=[5.4471780, 0.8245470];      %[α1,α2]                 H的基组
KAI{2,1}=[0.1562850, 0.9046910];      %[d1,d2]
KAI{1,2}=[0.1831920];                        %[α3]
KAI{2,2}=[1.0000000];                        %[d3]

KAI{1,3}=[13.6267, 1.99935];              %[α1,α2]                 He的基组
KAI{2,3}=[0.17523000, 0.893483000];      %[d1,d2]
KAI{1,4}=[0.382993];                          %[α3]
KAI{2,4}=[1.0000000];                        %[d3]

%本程序中用的是原子单位制(1a.u.=0.53A)

for y=1:81
    r=1.95+0.05*y;
    ra=[0,0,r,r,];         %r of atoms
    %S: overlap integration
    %T: kinetic energy
    %V: potential energy
    for i=1:4
        for j=1:i
            S0=0; T0=0; V0=0;
            for h=1:n(i)                                     %h,g are serial numbers of Gaussian function
                for g=1:n(j) 
                    aa=KAI{1,j}(g)+KAI{1,i}(h);             %aa: add alpha
                    at=KAI{1,j}(g)*KAI{1,i}(h);               %at: time alpha
                    S0=S0+KAI{2,j}(g)*KAI{2,i}(h)*(pi/aa)^1.5*exp(-(ra(i)-ra(j))^2*at/aa);
                    T0=T0+KAI{2,j}(g)*KAI{2,i}(h)*at/aa*(3-2*(ra(i)-ra(j))^2*at/aa)*(pi/aa)^1.5*exp(-(ra(i)-ra(j))^2*at/aa);
                    rp=(KAI{1,j}(g)*ra(j)+KAI{1,i}(h)*ra(i))/(KAI{1,j}(g)+KAI{1,i}(h));
                    if(ra(i)==0&&ra(j)==0)
                        F0=1+2*pi^0.5/2*erf(r*aa^0.5)/(r*aa^0.5);
                    elseif(ra(i)==r&&ra(j)==r)
                        F0=2+pi^0.5/2*erf(r*aa^0.5)/(r*aa^0.5);
                    else
                        F0=pi^0.5/2*(2*erf(abs(r-rp)*aa^0.5)/(abs(r-rp)*aa^0.5)+erf(rp*aa^0.5)/(rp*aa^0.5));
                    end
                    V0=V0-KAI{2,j}(g)*KAI{2,i}(h)*F0*2*pi/aa*exp(-(ra(i)-ra(j))^2*at/aa);
                end
            end
                S(i,j)=S0; S(j,i)=S0;
                T(i,j)=T0; T(j,i)=T0;
                V(i,j)=V0; V(j,i)=V0;
        end
    end
    
    %two-electron integrate (i,j | k,l)
    for i=1:4
        for j=1:i
            for k=1:j;
                for l=1:k;
                    G0=0;
                    for a=1:n(i)
                        for b=1:n(j);
                            for c=1:n(k);
                                for d=1:n(l);
                                    aa1=KAI{1,i}(a)+KAI{1,j}(b); at1=KAI{1,i}(a)*KAI{1,j}(b);
                                    aa2=KAI{1,k}(c)+KAI{1,l}(d); at2=KAI{1,l}(d)*KAI{1,k}(c);
                                    rp=(KAI{1,i}(a)*ra(i)+KAI{1,j}(b)*ra(j))/(KAI{1,i}(a)+KAI{1,j}(b));
                                    rq=(KAI{1,k}(c)*ra(k)+KAI{1,l}(d)*ra(l))/(KAI{1,k}(c)+KAI{1,l}(d));
                                    if (rp==rq)
                                        F0=1;
                                    else 
                                        F0=0.5*(pi)^0.5*erf(abs(rp-rq)*sqrt(aa1*aa2/(aa1+aa2)))/abs(rp-rq)/sqrt(aa1*aa2/(aa1+aa2));
                                    end
                                    G0=G0+F0*KAI{2,i}(a)*KAI{2,j}(b)*KAI{2,k}(c)*KAI{2,l}(d)*2*(pi)^2.5/aa1/aa2/(aa1+aa2)^0.5*exp(-(ra(i)-ra(j))^2*at1/aa1-(ra(k)-ra(l))^2*at2/aa2);
                                end
                            end
                        end
                    end
                    G(i,j,k,l)=G0; G(k,l,i,j)=G0;
                    G(j,i,k,l)=G0; G(j,i,k,l)=G0;
                    G(i,j,l,k)=G0; G(l,k,i,j)=G0;
                    G(j,i,l,k)=G0; G(l,k,j,i)=G0;
                end
            end            
        end
    end
    
    % diagonalize S matrix
    [U,D]=eig(S);
    for i=1:4
        R(i,i)=D(i,i)^(-0.5);
    end
    X=U*R*U';
    
    %initialize density matrix P
    Ca=ones(4,1);  Cb=ones(4,2);
    Pa=Ca*Ca';  Pb=Cb*Cb';    %α和β的密度矩阵
    Enew(1)=1;
    t=1;
    Elast=0;
    Elowest=10;
    while(abs(Elast-Enew(t))>0.0001)
        Elast=Enew(t);
        t=t+1;
        Enew(t)=0;
        %initiallize F matrix
        for i=1:4
            for j=1:4
                JKa=0;  JKb=0;
                for k=1:4
                    for l=1:4
                        JKa=JKa+(Pa(k,l)+Pb(k,l))*G(i,j,k,l)-Pa(k,l)*G(i,l,k,j);
                        JKb=JKb+(Pa(k,l)+Pb(k,l))*G(i,j,k,l)-Pb(k,l)*G(i,l,k,j);
                    end
                end
                 Fa(i,j)=T(i,j)+V(i,j)+JKa;  Fb(i,j)=T(i,j)+V(i,j)+JKb;
            end
        end
                
        Fprimea=X'*Fa*X;  Fprimeb=X'*Fb*X;  
        [Yprimea,epsilona]=eig(Fprimea); [Yprimeb,epsilonb]=eig(Fprimeb);
        Ya=X*Yprimea; Yb=X*Yprimeb;
        EMa=diag(epsilona,0); EMb=diag(epsilonb,0);    %EM: epsilon matrix 本征值对角化的矩阵
        [SortedEMa,indexa]=sort(EMa); [SortedEMb,indexb]=sort(EMb);    %选取能量最低的轨道作为分子轨道
        Ca=Ya(:,indexa(1));
        Cb(:,1)=Yb(:,indexb(1));
        Cb(:,2)=Yb(:,indexb(2));
        Pa=Ca*Ca';  Pb=Cb*Cb';
        Pt=Pa+Pb;
        
        for i=1:4
            for j=1:4
                Enew(t)=Enew(t)+0.5*(Pt(i,j)*(T(i,j)+V(i,j))+Pa(i,j)*Fa(i,j)+Pb(i,j)*Fb(i,j));
            end
        end
    end
    E(y)=Enew(t)+2/r;       %E指总能量
       if E(y)<Elowest
           Elowest=E(y);
       end
    
end

figure();
scatter([2:0.05:6],E);
title('Total energy');
xlabel('H-He bondlength (in a.u.)');
ylabel('Total energy (in a.u.)');

display(['The energy of hydrogen molecule is ',num2str(Elowest)]); 
